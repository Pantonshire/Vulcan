package com.~MODID~;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.ActionResult;
import net.minecraft.util.EnumActionResult;
import net.minecraft.util.EnumHand;
import net.minecraft.world.World;

import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

import java.util.Collection;
import java.util.HashMap;
import java.util.Random;

public final class ItemManager {

    private HashMap<String, Item> items;

    public static CreativeTabs tab = new CreativeTabs("~MODID~_items") {
        @SideOnly(Side.CLIENT)
        public ItemStack getTabIconItem() {
            return new ItemStack(VulcanMod.items.getRandomItem(VulcanMod.rand));
        }
    };

    public ItemManager() {
        items = new HashMap<String, Item>();
    }

    public Item getItem(String name) {
        if(items.containsKey(name)) {
            return items.get(name);
        } else {
            System.err.println("Could not find an item called \'" + name + "\'.");
            return Items.APPLE;
        }
    }

    public Item getRandomItem(Random random) {
        if(!items.isEmpty) {
            Collection<Item> values = items.values();
            int index = random.nextInt(values.size());
            int i = 0;
            for(Item item : values) {
                if(i == index) { return item; }
                ++i;
            }
        }

        return Items.APPLE;
    }

    public Item addItem(String name, Item item) {
        items.put(name, item);
        VulcanMod.registry.scheduleRegisterItem(item, name);
        return item;
    }

    public void registerModels() {
        net.minecraft.client.renderer.RenderItem renderItem = Minecraft.getMinecraft().getRenderItem();
        for(String itemName : items.keySet()) {
            renderItem.getItemModelMesher().register(items.get(itemName), 0, new ModelResourceLocation("~MODID~:" + itemName, "inventory"));
        }
    }
}