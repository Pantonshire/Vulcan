package com.~MODID~;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.item.Item;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.world.Explosion;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;

import java.util.Random;

public class VulcanBlock extends Block {

    private boolean explosionDestroysBlock;
    private boolean flammable;
    private boolean burnForever;
    private int redstoneSignal;
    private Item itemDrop;
    private int minExpDrop, maxExpDrop;

    public VulcanBlock(double hardness, double resistance, boolean unbreakable, double slipperiness, double light, String tool, int harvestLevel, boolean destroyedByExplosion, boolean flammable, boolean burnForever, int redstoneSignal, Item item, int minExpDrop, int maxExpDrop) {
        super(Material.ROCK);
        setCreativeTab(BlockManager.tab);
        setHardness((float)hardness);
        setResistance((float)resistance);
        this.explosionDestroysBlock = destroyedByExplosion;
        this.flammable = flammable;
        this.burnForever = burnForever;
        this.redstoneSignal = MathHelper.clamp(redstoneSignal, 0, 15);

        if(slipperiness != 0) {
            setDefaultSlipperiness(MathHelper.clamp((float)slipperiness, 0f, 1f));
        }

        if(light != 0) {
            setLightLevel(MathHelper.clamp((float)light, 0f, 1f));
        }

        if(unbreakable) {
            setBlockUnbreakable();
        }

        if(!tool.isEmpty()) {
            setHarvestLevel(tool, harvestLevel);
        }

        if(item != null) {
            this.itemDrop = item;
            this.minExpDrop = minExpDrop;
            this.maxExpDrop = maxExpDrop;
        }
    }

    @Override
    public boolean canDropFromExplosion(Explosion explosion) {
        return !explosionDestroysBlock;
    }

    @Override
    public Item getItemDropped(IBlockState state, Random random, int fortune) {
        return itemDrop == null ? super.getItemDropped(state, random, fortune) : itemDrop;
    }

    @Override
    public int quantityDroppedWithBonus(int fortune, Random random) {
        if(itemDrop != null && fortune > 0) {
            return quantityDropped(random) * Math.max(random.nextInt(fortune + 2) - 1, 0) + 1;
        }

        return quantityDropped(random);
    }

    @Override
    public int getExpDrop(IBlockState state, net.minecraft.world.IBlockAccess world, BlockPos pos, int fortune) {
        if(itemDrop != null) {
            Random random = world instanceof World ? ((World)world).rand : new Random();
            return MathHelper.getInt(random, minExpDrop, maxExpDrop);
        }

        return 0;
    }

    @Override
    public int getFlammability(IBlockAccess world, BlockPos pos, EnumFacing face) {
        return flammable ? 20 : super.getFlammability(world, pos, face);
    }

    @Override
    public int getFireSpreadSpeed(IBlockAccess world, BlockPos pos, EnumFacing face) {
        return flammable ? 5 : super.getFireSpreadSpeed(world, pos, face);
    }

    @Override
    public boolean isFireSource(World world, BlockPos pos, EnumFacing side) {
        return (burnForever && side == EnumFacing.UP) || super.isFireSource(world, pos, side);
    }

    @Override
    public boolean canProvidePower(IBlockState state) {
        return redstoneSignal > 0;
    }

    @Override
    public int getWeakPower(IBlockState blockState, IBlockAccess blockAccess, BlockPos pos, EnumFacing side) {
        return redstoneSignal;
    }
}